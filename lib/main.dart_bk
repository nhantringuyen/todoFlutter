import 'dart:ffi';

import 'package:flutter/material.dart';
import 'dart:convert';

import 'dart:async';
import 'package:path_provider/path_provider.dart' as path_provider;
import 'package:hive/hive.dart';


void main() async{
  // Avoid errors caused by flutter upgrade.
  // Importing 'package:flutter/widgets.dart' is required.
  WidgetsFlutterBinding.ensureInitialized();
  // Open the database and store the reference.
//   final database = openDatabase(
//   // Set the path to the database. Note: Using the `join` function from the
//   // `path` package is best practice to ensure the path is correctly
//   // constructed for each platform.
//   join(await getDatabasesPath(), 'people_database.db'),
//   // When the database is first created, create a table to store dogs.
//   onCreate: (db, version) {
//     // Run the CREATE TABLE statement on the database.
//     return db.execute(
//       'CREATE TABLE people(id INTEGER PRIMARY KEY, name TEXT, status INTEGER)',
//     );
//   },
//   // Set the version. This executes the onCreate function and provides a
//   // path to perform database upgrades and downgrades.
//   version: 1,
// );
//   Future<void> insertPerson(ListPerson person) async {
//   // Get a reference to the database.
//   final db = await database;

//   // Insert the Person into the correct table. You might also specify the
//   // `conflictAlgorithm` to use in case the same person is inserted twice.
//   //
//   // In this case, replace any previous data.
//   await db.insert(
//     'people',
//     person.toMap(),
//     conflictAlgorithm: ConflictAlgorithm.replace,
//   );
// }
//   Future<List<ListPerson>> people() async {
//   // Get a reference to the database.
//   final db = await database;

//   // Query the table for all The people.
//   final List<Map<String, dynamic>> maps = await db.query('people');

//   // Convert the List<Map<String, dynamic> into a List<ListPerson>.
//   return List.generate(maps.length, (i) {
//     return ListPerson(
//       id: maps[i]['id'],
//       name: maps[i]['name'],
//       status: maps[i]['status'],
//     );
//   });
// }
//   Future<void> updatePerson(ListPerson person) async {
//   // Get a reference to the database.
//   final db = await database;

//   // Update the given Person.
//   await db.update(
//     'people',
//     person.toMap(),
//     // Ensure that the Person has a matching id.
//     where: 'id = ?',
//     // Pass the Person's id as a whereArg to prevent SQL injection.
//     whereArgs: [person.id],
//   );
// }
//   Future<void> deletePerson(int id) async {
//     // Get a reference to the database.
//     final db = await database;

//     // Remove the People from the database.
//     await db.delete(
//       'people',
//       // Use a `where` clause to delete a specific person.
//       where: 'id = ?',
//       // Pass the Person's id as a whereArg to prevent SQL injection.
//       whereArgs: [id],
//     );
//   }
  final appDocumentDirectory = await path_provider.getApplicationDocumentsDirectory();
  Hive.init(appDocumentDirectory.path);
  // Hive.registerAdapter(ContactAdapter());
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        // This is the theme of your application.
        //
        // TRY THIS: Try running your application with "flutter run". You'll see
        // the application has a blue toolbar. Then, without quitting the app,
        // try changing the seedColor in the colorScheme below to Colors.green
        // and then invoke "hot reload" (save your changes or press the "hot
        // reload" button in a Flutter-supported IDE, or press "r" if you used
        // the command line to start the app).
        //
        // Notice that the counter didn't reset back to zero; the application
        // state is not lost during the reload. To reset the state, use hot
        // restart instead.
        //
        // This works for code too, not just values: Most code changes can be
        // tested with just a hot reload.
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;

  void _incrementCounter() {
    setState(() {
      // This call to setState tells the Flutter framework that something has
      // changed in this State, which causes it to rerun the build method below
      // so that the display can reflect the updated values. If we changed
      // _counter without calling setState(), then the build method would not be
      // called again, and so nothing would appear to happen.
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    // This method is rerun every time setState is called, for instance as done
    // by the _incrementCounter method above.
    //
    // The Flutter framework has been optimized to make rerunning build methods
    // fast, so that you can just rebuild anything that needs updating rather
    // than having to individually change instances of widgets.
    return Scaffold(
      appBar: AppBar(
        // TRY THIS: Try changing the color here to a specific color (to
        // Colors.amber, perhaps?) and trigger a hot reload to see the AppBar
        // change color while the other colors stay the same.
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        // Here we take the value from the MyHomePage object that was created by
        // the App.build method, and use it to set our appbar title.
        title: Text(widget.title),
      ),
      body: Container(
        // Center is a layout widget. It takes a single child and positions it
        // in the middle of the parent.
        child: Column(
          // Column is also a layout widget. It takes a list of children and
          // arranges them vertically. By default, it sizes itself to fit its
          // children horizontally, and tries to be as tall as its parent.
          //
          // Column has various properties to control how it sizes itself and
          // how it positions its children. Here we use mainAxisAlignment to
          // center the children vertically; the main axis here is the vertical
          // axis because Columns are vertical (the cross axis would be
          // horizontal).
          //
          // TRY THIS: Invoke "debug painting" (choose the "Toggle Debug Paint"
          // action in the IDE, or press "p" in the console), to see the
          // wireframe for each widget.
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[

            Expanded(
              flex: 1,
              child: FormRegisterNote()),
            Expanded(
              flex: 1,
              child: ListNote())
        
        
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: const Icon(Icons.add),
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}

class FormRegisterNote extends StatefulWidget {
  const FormRegisterNote({super.key});

  @override
  State<FormRegisterNote> createState() => _FormRegisterNoteState();
}

class _FormRegisterNoteState extends State<FormRegisterNote> {
  @override
  Widget build(BuildContext context) {
    return  Text(
              'sssss',
              style: Theme.of(context).textTheme.headlineMedium,
            );
  }
}

class ListPerson{
  final int ? id;
  final String ? name;
  final bool  ? status;

  ListPerson({
    this.id,
    this.name,
    this.status
  });  
   // columns in the database.
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'status': status,
    };
  }
  // Implement toString to make it easier to see information about
  @override
  String toString() {
    return 'ListPerson{id: $id, name: $name, status: $status}';
  }
 
  factory ListPerson.fromJson(Map<String, dynamic> json) => ListPerson(
        id: json["id"],
        name: json["name"],
       status: json["status"],
      );
}

List<ListPerson> continentFromJson(String str) =>
    List<ListPerson>.from(json.decode(str).map((x) => ListPerson.fromJson(x)));

class ContinentServices {
  Future<List<ListPerson>> getContinent() {
    String jsonString = '''
    [
  {
    "id": 1,
    "name": "Tai",
    "status": true        
  },
  {
    "id": 2,
    "name": "Van",
    "status": false        
  },
  {
    "id": 3,
    "name": "Dung",
    "status": true        
  },
  {
    "id": 4,
    "name": "Mao",
    "status": true        
  }

]
    ''';
    List<ListPerson> continentList = continentFromJson(jsonString);
    return Future.value(continentList);
  }
}


class ListNote extends StatefulWidget {
  const ListNote({super.key});


  @override
  State<ListNote> createState() => _ListNoteState();
}

class _ListNoteState extends State<ListNote> {
  late List<ListPerson> _continent;
  @override
  void initState() {
    super.initState();
    ContinentServices().getContinent().then((continents) {
      setState(() {
        _continent = continents;
      });
    });
  }



  @override
  Widget build(BuildContext context) {
    // final appTitle = 'Flutter Basic List Demo'; 
    // return ListView.builder(itemBuilder: itemBuilder)
    // return ListView(  
    //       children: <Widget>[  
    //         ListTile(  
    //           leading: Icon(Icons.map),  
    //           title: Text('Map'),  
    //         ),  
    //         ListTile(  
    //           leading: Icon(Icons.photo_album),  
    //           title: Text('Album'),  
    //         ),  
    //         ListTile(  
    //           leading: Icon(Icons.phone),  
    //           title: Text('Phone'),  
    //         ),  
    //         ListTile(  
    //           leading: Icon(Icons.contacts),  
    //           title: Text('Contact'),  
    //         ),  
    //         ListTile(  
    //           leading: Icon(Icons.settings),  
    //           title: Text('Setting'),  
    //         ), 
    //          ListTile(  
    //           leading: Icon(Icons.map),  
    //           title: Text('Map'),  
    //         ),  
    //         ListTile(  
    //           leading: Icon(Icons.photo_album),  
    //           title: Text('Album'),  
    //         ),  
    //         ListTile(  
    //           leading: Icon(Icons.phone),  
    //           title: Text('Phone'),  
    //         ),  
    //         ListTile(  
    //           leading: Icon(Icons.contacts),  
    //           title: Text('Contact'),  
    //         ),  
    //         ListTile(  
    //           leading: Icon(Icons.settings),  
    //           title: Text('Setting'),  
    //         ),   
    //       ],  
    //     );
    return ListView.separated(
    padding: const EdgeInsets.all(8),
    itemCount:  null == _continent ? 0 : _continent.length,
    itemBuilder: (BuildContext context, int index) {
      return Container(
        height: 50,
        child: Row(
          mainAxisAlignment:
                                          MainAxisAlignment.center,
                                      crossAxisAlignment:
                                          CrossAxisAlignment.center,
          children: <Widget>[Text('${_continent[index].name}'), SizedBox(width: 8), Text('${_continent[index].status}'),SizedBox(width: 8),
          ElevatedButton(
          onPressed: () {
            // Handle button press here
          },
          child: Text('Edit'),
        ),
        SizedBox(width: 8),
        ElevatedButton(
          onPressed: () {
            // Handle button press here
            deleteEntry(_continent[index]);
          },
          child: Text('Delete'),
        ),]
          ),
      );
    },
    separatorBuilder: (BuildContext context, int index) => const Divider(),
  );
  }
  void deleteEntry(entry) {
  // Implement your logic to delete the entry here
  // You can use the entry parameter to identify and remove the corresponding entry from your data structure
}
}